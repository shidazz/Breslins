//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""InMatch"",
            ""id"": ""b2c289b1-6547-4d59-b836-4c9611c573b2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""521ee631-2bc7-4bf6-b6a0-d370f2711123"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swing"",
                    ""type"": ""Button"",
                    ""id"": ""69cdc185-890f-46db-b881-053fc3094236"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset Ball"",
                    ""type"": ""Button"",
                    ""id"": ""90dc803b-d855-4c19-ab7c-6cb312dfec41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""3832ebe6-006d-4d97-af1f-eeafca44e1a2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""48d1d021-c52a-4add-8cb7-a7e1a7340e0b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fd7e747a-2e0a-4529-83cd-367df9097912"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""cb7d3c51-25f1-40da-936d-dc04285aa647"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9a39084e-1752-414a-9848-c00a75b8c6de"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""335c2d69-9dc5-485f-926a-f43dcac7bb4a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9238d4c-a7d1-4da5-805f-42f3c3023f44"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d00fc2ac-b3d1-472a-b735-67cb70cfd924"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a4e2192-f424-43ba-ada0-9bb8414244d8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Ball"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c249049f-bbcb-4e3b-9a17-86e47086b99e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Ball"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InMatch
        m_InMatch = asset.FindActionMap("InMatch", throwIfNotFound: true);
        m_InMatch_Movement = m_InMatch.FindAction("Movement", throwIfNotFound: true);
        m_InMatch_Swing = m_InMatch.FindAction("Swing", throwIfNotFound: true);
        m_InMatch_ResetBall = m_InMatch.FindAction("Reset Ball", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InMatch
    private readonly InputActionMap m_InMatch;
    private IInMatchActions m_InMatchActionsCallbackInterface;
    private readonly InputAction m_InMatch_Movement;
    private readonly InputAction m_InMatch_Swing;
    private readonly InputAction m_InMatch_ResetBall;
    public struct InMatchActions
    {
        private @PlayerInput m_Wrapper;
        public InMatchActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InMatch_Movement;
        public InputAction @Swing => m_Wrapper.m_InMatch_Swing;
        public InputAction @ResetBall => m_Wrapper.m_InMatch_ResetBall;
        public InputActionMap Get() { return m_Wrapper.m_InMatch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InMatchActions set) { return set.Get(); }
        public void SetCallbacks(IInMatchActions instance)
        {
            if (m_Wrapper.m_InMatchActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_InMatchActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_InMatchActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_InMatchActionsCallbackInterface.OnMovement;
                @Swing.started -= m_Wrapper.m_InMatchActionsCallbackInterface.OnSwing;
                @Swing.performed -= m_Wrapper.m_InMatchActionsCallbackInterface.OnSwing;
                @Swing.canceled -= m_Wrapper.m_InMatchActionsCallbackInterface.OnSwing;
                @ResetBall.started -= m_Wrapper.m_InMatchActionsCallbackInterface.OnResetBall;
                @ResetBall.performed -= m_Wrapper.m_InMatchActionsCallbackInterface.OnResetBall;
                @ResetBall.canceled -= m_Wrapper.m_InMatchActionsCallbackInterface.OnResetBall;
            }
            m_Wrapper.m_InMatchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Swing.started += instance.OnSwing;
                @Swing.performed += instance.OnSwing;
                @Swing.canceled += instance.OnSwing;
                @ResetBall.started += instance.OnResetBall;
                @ResetBall.performed += instance.OnResetBall;
                @ResetBall.canceled += instance.OnResetBall;
            }
        }
    }
    public InMatchActions @InMatch => new InMatchActions(this);
    public interface IInMatchActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSwing(InputAction.CallbackContext context);
        void OnResetBall(InputAction.CallbackContext context);
    }
}
